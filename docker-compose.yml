version: '3'  # เวอร์ชันที่เหมาะสมสำหรับ Docker Compose

services:
  frontend:
    image: node:16
    working_dir: /app
    volumes:
      - ./slots-frontend:/app  # เชื่อมโฟลเดอร์ frontend
    ports:
      - "3001:3001"  # เปิดพอร์ต 3001 สำหรับ frontend
    command: sh -c "
      curl -fsSL https://bun.sh/install | bash &&
      export PATH=\"/root/.bun/bin:$PATH\" &&
      bun install &&
      npm install -g serve &&
      bun run build &&
      serve -s build -l 3001 "  # ติดตั้ง serve แบบ global และรัน frontend
    environment:
      - REACT_APP_BACKEND_URL=http://backend:3000  # URL backend สำหรับการเชื่อมต่อ
    networks:
      - frontend  # เชื่อมโยงเครือข่าย frontend

  backend:
    image: node:16  # ใช้ Node.js เวอร์ชัน 16 สำหรับ backend
    working_dir: /app  # โฟลเดอร์ทำงานภายในคอนเทนเนอร์
    volumes:
      - ./slots-backend:/app  # เชื่อมโฟลเดอร์ backend
    ports:
      - "3000:3000"  # เปิดพอร์ต 3000 สำหรับ backend
    command: sh -c "
      curl -fsSL https://bun.sh/install | bash &&
      export PATH=\"/root/.bun/bin:$PATH\" &&
      bun install &&
      bun run server.ts "  # ติดตั้ง bun และรัน backend
    environment:
      - NODE_ENV=development  # กำหนดให้เป็นโหมดพัฒนา
      - PORT=3000  # กำหนดพอร์ต backend
      - DATABASE_HOST=db  # ชื่อบริการฐานข้อมูล
      - DATABASE_USER=postgres  # ผู้ใช้ฐานข้อมูล
      - DATABASE_PASSWORD=123456789  # รหัสผ่านฐานข้อมูล
      - DATABASE_NAME=slotdb  # ชื่อฐานข้อมูล
    networks:
      - backend  # เชื่อมโยงเครือข่าย backend

  db:
    image: postgres:13  # ใช้ PostgreSQL เวอร์ชัน 13
    environment:
      - POSTGRES_USER=postgres  # ตั้งชื่อผู้ใช้ PostgreSQL
      - POSTGRES_PASSWORD=123456789  # ตั้งรหัสผ่านสำหรับ PostgreSQL
      - POSTGRES_DB=slotdb  # ชื่อฐานข้อมูลที่จะสร้าง
    volumes:
      - postgres_data:/var/lib/postgresql/data  # เชื่อมข้อมูลฐานข้อมูลใน volume
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql  # รันสคริปต์ `init.sql` ตอนเริ่มต้น
    ports:
      - "5433:5432"  # เปิดพอร์ต 5433 ให้เข้าถึงฐานข้อมูล
    networks:
      - backend  # เชื่อมโยงเครือข่าย backend

networks:
  frontend:  # เครือข่ายสำหรับ frontend
  backend:  # เครือข่ายสำหรับ backend

volumes:
  postgres_data:  # Volume สำหรับเก็บข้อมูล PostgreSQL
